/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

const documents = {
    "\n  mutation Register(\n    $username: String!\n    $email: String!\n    $password1: String!\n    $password2: String!\n  ) {\n    register(\n      username: $username\n      email: $email\n      password1: $password1\n      password2: $password2\n    ) {\n      success\n      errors\n      token\n      refreshToken\n    }\n  }\n": types.RegisterDocument,
    "\n  mutation Login($email: String!, $password: String!) {\n    signin: tokenAuth(email: $email, password: $password) {\n      token\n      refreshToken\n      success\n      errors\n      user {\n        pk\n        username\n        email\n        profile {\n          id\n          imageUrl\n        }\n      }\n    }\n  }\n": types.LoginDocument,
    "\n  mutation RefreshToken ($refreshToken: String!) {\n    refreshToken (refreshToken: $refreshToken) {\n      token\n      payload\n      success\n      errors\n      refreshToken\n    }\n  }\n": types.RefreshTokenDocument,
    "\n  mutation CreateUpdateCourse(\n    $name: String\n    $description: String\n    $sectionId: ID\n    $startDate: Date\n    $endDate: Date\n    $courseId: ID\n  ) {\n    course: createUpdateCourse(\n      name: $name\n      description: $description\n      sectionId: $sectionId\n      startDate: $startDate\n      endDate: $endDate\n      courseId: $courseId\n    ) {\n      course {\n        name\n        description\n        startDate\n        endDate\n        progress\n        id\n        section {\n          id\n        }\n      }\n      success\n      errors\n    }\n  }\n": types.CreateUpdateCourseDocument,
    "\n  mutation CreateUpdateSection(\n    $name: String\n    $description: String\n    $sectionId: ID\n    $startDate: Date\n    $endDate: Date\n  ) {\n    section: createUpdateSection(\n      name: $name\n      description: $description\n      sectionId: $sectionId\n      startDate: $startDate\n      endDate: $endDate\n    ) {\n      section {\n        id\n        name\n        description\n        startDate\n        endDate\n      }\n      success\n      errors\n    }\n  }\n": types.CreateUpdateSectionDocument,
    "\n  mutation CreateResource(\n    $audio: Upload\n    $video: Upload\n    $document: Upload\n    $image: Upload\n    $description: String\n    $courseId: ID!\n    $resourceId: ID\n    $link: String\n    $public: Boolean\n  ) {\n    resource: createUpdateResource(\n      audio: $audio\n      courseId: $courseId\n      description: $description\n      image: $image\n      link: $link\n      document: $document\n      public: $public\n      resourceId: $resourceId\n      video: $video\n    ) {\n      resource {\n        id\n        creator {\n          id\n        }\n        course {\n          id\n        }\n        description\n        link\n        document\n        audio\n        image\n        video\n      }\n      success\n      errors\n    }\n  }\n": types.CreateResourceDocument,
    "\n  mutation DeleteCourse ($courseId: ID!){\n    delete: deleteCourse (courseId: $courseId) {\n      success\n      errors\n    }\n  }\n": types.DeleteCourseDocument,
    "\n  query User {\n    user: me {\n      pk\n      username\n      email\n      profile {\n        id\n        imageUrl\n      }\n    }\n  }\n": types.UserDocument,
    "\n  query UserCourses {\n    courses: userCourses {\n      id\n      name\n      startDate\n      endDate\n      description\n      section {\n        id\n        startDate\n      }\n      progress\n    }\n  }\n": types.UserCoursesDocument,
    "\n  query UserSections {\n    sections: userSections {\n      id\n      startDate\n      endDate\n      dateAdded\n      name\n      description\n    }\n  }\n": types.UserSectionsDocument,
    "\n  query UserResources {\n    resources: userResources {\n      id\n      creator {\n        id\n      }\n      course {\n        id\n      }\n      description\n      link\n      document\n      audio\n      image\n      video\n    }\n  }\n": types.UserResourcesDocument,
    "\n  query GetCourseByID ($id: ID!){\n    course: getCourseById(id: $id) {\n      id\n      name\n      startDate\n      endDate\n      description\n      section {\n        id\n      }\n      progress\n      resources {\n        id\n        description\n        link\n        document\n        audio\n        image\n        video\n      }\n    }\n  }\n": types.GetCourseByIdDocument,
    "\n  query GetResourceByCourseID($courseId: ID!){\n    resources: getResourcesByCourseId(courseId: $courseId) {\n      id\n      course {\n        id\n      }\n      description\n      link\n      document\n      audio\n      image\n      video\n      creator {\n        id\n      }\n    }\n  }\n": types.GetResourceByCourseIdDocument,
    "\n  query ResourceByID($resourceId: ID!){\n    resource: getResourceById (resourceId: $resourceId){\n      id\n      description\n      link\n      document\n      audio\n      image\n      video\n      public\n    }\n  }\n": types.ResourceByIdDocument,
};

export function graphql(source: "\n  mutation Register(\n    $username: String!\n    $email: String!\n    $password1: String!\n    $password2: String!\n  ) {\n    register(\n      username: $username\n      email: $email\n      password1: $password1\n      password2: $password2\n    ) {\n      success\n      errors\n      token\n      refreshToken\n    }\n  }\n"): (typeof documents)["\n  mutation Register(\n    $username: String!\n    $email: String!\n    $password1: String!\n    $password2: String!\n  ) {\n    register(\n      username: $username\n      email: $email\n      password1: $password1\n      password2: $password2\n    ) {\n      success\n      errors\n      token\n      refreshToken\n    }\n  }\n"];
export function graphql(source: "\n  mutation Login($email: String!, $password: String!) {\n    signin: tokenAuth(email: $email, password: $password) {\n      token\n      refreshToken\n      success\n      errors\n      user {\n        pk\n        username\n        email\n        profile {\n          id\n          imageUrl\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation Login($email: String!, $password: String!) {\n    signin: tokenAuth(email: $email, password: $password) {\n      token\n      refreshToken\n      success\n      errors\n      user {\n        pk\n        username\n        email\n        profile {\n          id\n          imageUrl\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation RefreshToken ($refreshToken: String!) {\n    refreshToken (refreshToken: $refreshToken) {\n      token\n      payload\n      success\n      errors\n      refreshToken\n    }\n  }\n"): (typeof documents)["\n  mutation RefreshToken ($refreshToken: String!) {\n    refreshToken (refreshToken: $refreshToken) {\n      token\n      payload\n      success\n      errors\n      refreshToken\n    }\n  }\n"];
export function graphql(source: "\n  mutation CreateUpdateCourse(\n    $name: String\n    $description: String\n    $sectionId: ID\n    $startDate: Date\n    $endDate: Date\n    $courseId: ID\n  ) {\n    course: createUpdateCourse(\n      name: $name\n      description: $description\n      sectionId: $sectionId\n      startDate: $startDate\n      endDate: $endDate\n      courseId: $courseId\n    ) {\n      course {\n        name\n        description\n        startDate\n        endDate\n        progress\n        id\n        section {\n          id\n        }\n      }\n      success\n      errors\n    }\n  }\n"): (typeof documents)["\n  mutation CreateUpdateCourse(\n    $name: String\n    $description: String\n    $sectionId: ID\n    $startDate: Date\n    $endDate: Date\n    $courseId: ID\n  ) {\n    course: createUpdateCourse(\n      name: $name\n      description: $description\n      sectionId: $sectionId\n      startDate: $startDate\n      endDate: $endDate\n      courseId: $courseId\n    ) {\n      course {\n        name\n        description\n        startDate\n        endDate\n        progress\n        id\n        section {\n          id\n        }\n      }\n      success\n      errors\n    }\n  }\n"];
export function graphql(source: "\n  mutation CreateUpdateSection(\n    $name: String\n    $description: String\n    $sectionId: ID\n    $startDate: Date\n    $endDate: Date\n  ) {\n    section: createUpdateSection(\n      name: $name\n      description: $description\n      sectionId: $sectionId\n      startDate: $startDate\n      endDate: $endDate\n    ) {\n      section {\n        id\n        name\n        description\n        startDate\n        endDate\n      }\n      success\n      errors\n    }\n  }\n"): (typeof documents)["\n  mutation CreateUpdateSection(\n    $name: String\n    $description: String\n    $sectionId: ID\n    $startDate: Date\n    $endDate: Date\n  ) {\n    section: createUpdateSection(\n      name: $name\n      description: $description\n      sectionId: $sectionId\n      startDate: $startDate\n      endDate: $endDate\n    ) {\n      section {\n        id\n        name\n        description\n        startDate\n        endDate\n      }\n      success\n      errors\n    }\n  }\n"];
export function graphql(source: "\n  mutation CreateResource(\n    $audio: Upload\n    $video: Upload\n    $document: Upload\n    $image: Upload\n    $description: String\n    $courseId: ID!\n    $resourceId: ID\n    $link: String\n    $public: Boolean\n  ) {\n    resource: createUpdateResource(\n      audio: $audio\n      courseId: $courseId\n      description: $description\n      image: $image\n      link: $link\n      document: $document\n      public: $public\n      resourceId: $resourceId\n      video: $video\n    ) {\n      resource {\n        id\n        creator {\n          id\n        }\n        course {\n          id\n        }\n        description\n        link\n        document\n        audio\n        image\n        video\n      }\n      success\n      errors\n    }\n  }\n"): (typeof documents)["\n  mutation CreateResource(\n    $audio: Upload\n    $video: Upload\n    $document: Upload\n    $image: Upload\n    $description: String\n    $courseId: ID!\n    $resourceId: ID\n    $link: String\n    $public: Boolean\n  ) {\n    resource: createUpdateResource(\n      audio: $audio\n      courseId: $courseId\n      description: $description\n      image: $image\n      link: $link\n      document: $document\n      public: $public\n      resourceId: $resourceId\n      video: $video\n    ) {\n      resource {\n        id\n        creator {\n          id\n        }\n        course {\n          id\n        }\n        description\n        link\n        document\n        audio\n        image\n        video\n      }\n      success\n      errors\n    }\n  }\n"];
export function graphql(source: "\n  mutation DeleteCourse ($courseId: ID!){\n    delete: deleteCourse (courseId: $courseId) {\n      success\n      errors\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteCourse ($courseId: ID!){\n    delete: deleteCourse (courseId: $courseId) {\n      success\n      errors\n    }\n  }\n"];
export function graphql(source: "\n  query User {\n    user: me {\n      pk\n      username\n      email\n      profile {\n        id\n        imageUrl\n      }\n    }\n  }\n"): (typeof documents)["\n  query User {\n    user: me {\n      pk\n      username\n      email\n      profile {\n        id\n        imageUrl\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query UserCourses {\n    courses: userCourses {\n      id\n      name\n      startDate\n      endDate\n      description\n      section {\n        id\n        startDate\n      }\n      progress\n    }\n  }\n"): (typeof documents)["\n  query UserCourses {\n    courses: userCourses {\n      id\n      name\n      startDate\n      endDate\n      description\n      section {\n        id\n        startDate\n      }\n      progress\n    }\n  }\n"];
export function graphql(source: "\n  query UserSections {\n    sections: userSections {\n      id\n      startDate\n      endDate\n      dateAdded\n      name\n      description\n    }\n  }\n"): (typeof documents)["\n  query UserSections {\n    sections: userSections {\n      id\n      startDate\n      endDate\n      dateAdded\n      name\n      description\n    }\n  }\n"];
export function graphql(source: "\n  query UserResources {\n    resources: userResources {\n      id\n      creator {\n        id\n      }\n      course {\n        id\n      }\n      description\n      link\n      document\n      audio\n      image\n      video\n    }\n  }\n"): (typeof documents)["\n  query UserResources {\n    resources: userResources {\n      id\n      creator {\n        id\n      }\n      course {\n        id\n      }\n      description\n      link\n      document\n      audio\n      image\n      video\n    }\n  }\n"];
export function graphql(source: "\n  query GetCourseByID ($id: ID!){\n    course: getCourseById(id: $id) {\n      id\n      name\n      startDate\n      endDate\n      description\n      section {\n        id\n      }\n      progress\n      resources {\n        id\n        description\n        link\n        document\n        audio\n        image\n        video\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCourseByID ($id: ID!){\n    course: getCourseById(id: $id) {\n      id\n      name\n      startDate\n      endDate\n      description\n      section {\n        id\n      }\n      progress\n      resources {\n        id\n        description\n        link\n        document\n        audio\n        image\n        video\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query GetResourceByCourseID($courseId: ID!){\n    resources: getResourcesByCourseId(courseId: $courseId) {\n      id\n      course {\n        id\n      }\n      description\n      link\n      document\n      audio\n      image\n      video\n      creator {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetResourceByCourseID($courseId: ID!){\n    resources: getResourcesByCourseId(courseId: $courseId) {\n      id\n      course {\n        id\n      }\n      description\n      link\n      document\n      audio\n      image\n      video\n      creator {\n        id\n      }\n    }\n  }\n"];
export function graphql(source: "\n  query ResourceByID($resourceId: ID!){\n    resource: getResourceById (resourceId: $resourceId){\n      id\n      description\n      link\n      document\n      audio\n      image\n      video\n      public\n    }\n  }\n"): (typeof documents)["\n  query ResourceByID($resourceId: ID!){\n    resource: getResourceById (resourceId: $resourceId){\n      id\n      description\n      link\n      document\n      audio\n      image\n      video\n      public\n    }\n  }\n"];

export function graphql(source: string): unknown;
export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;